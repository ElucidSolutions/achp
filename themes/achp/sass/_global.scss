/* Global variables: widths, heights, & breakpoints */

$max-content-width: 1024px;
$mobile-breakpoint: 650px;
$hero-breakpoint: 925px;
$menu-breakpoint: 950px;
$header-height: 100px;
$header-mobile-height: 75px;
$header-menu-height: 72px;
$header-menu-widescreen-width: 1024px;
$header-menu-border-width: 3px;
$header-title-medium-width: 300px;
$header-title-small-width: 225px;
$header-logo-width: 89px;
$header-logo-small-width: 64px;
$header-logo-mobile-width: 48px;
/*$arrow-width: 8px;
$arrow-padding: 5px;*/
$more-quicklinks-height: 51px;
$quicklink-image-height: 160px;
$quicklink-item-height: 67px;
$quicklink-header-height: 160px + 100px;
$mobile-card-item-height: 75px;

/* Global variables: text */

$sans-text: 'p22-underground', sans-serif;
$serif-text: 'minion-pro', serif;
$base-text-size: 16px;

/* Global variables: colors */

$color-darkblue: #043B62;
$color-darkblue2: #003A5E;
$color-darkblue3: #003A53;
$color-medblue: #013B5E;
$color-blue-primary: #0990FE;
$color-lightblue-primary: #71BFFE;
$color-blue: #0990FE;
$color-lightblue: #309AEE;
$color-lightblue2: #008BFD;
$color-lightblue3: #E6F8FF;
$color-red: #950306;
$color-red2: #9B0008;
$color-red3: #CD1803;
$color-grey: #4F4F4F;
$color-grey2: #4A4A4A;
$color-grey3: #E2E2E2;
$color-darkgrey: #262626;
$color-darkgrey2: #1E1E1E;
$color-lightgrey: #C6C6C6;
$color-lightgrey-2: #7C7C7C;
$background-color-grey: #F4F4F4;
$background-color-lightblue: #E8F8FF;

/* Variables for homepage cards */

$card-margin-vert: 25px;
$card-margin-horiz: 20px;
$card-height: 400px;
$card-width: 300px;

/* Grid variables */

$gutter: 0;
$grid-columns: 12;

/* Mixin for centering horizontally */

@mixin center-x {
  position: absolute;
  left: 50%;
  -webkit-transform: translateX(-50%);
  -moz-transform: translateX(-50%);
  -ms-transform: translateX(-50%);
  -o-transform: translateX(-50%);
  transform: translateX(-50%);
}


/* Mixin for centering vertically */

@mixin center-y {
  position: absolute;
  top: 50%;
  -webkit-transform: translateY(-50%);
  -moz-transform: translateY(-50%);
  -ms-transform: translateY(-50%);
  -o-transform: translateY(-50%);
  transform: translateY(-50%);
}


/* Mixin for centering vertically & horizontally */

@mixin center-xy {
  position: absolute;
  top: 50%;
  left: 50%;
  -webkit-transform: translateX(-50%) translateY(-50%);
  -moz-transform: translateX(-50%) translateY(-50%);
  -ms-transform: translateX(-50%) translateY(-50%);
  -o-transform: translateX(-50%) translateY(-50%);
  transform: translateX(-50%) translateY(-50%);
}


/* Mixin for generating solid-colored hr elements*/

@mixin hr($color) {
  color: $color;
  background-color: $color;
  border: none;
  height: 1px;
}

/* Mixin for centering and cropping to fit images*/
@mixin fit-and-center-image($height) {
  position: relative;
  height: $height;
  width: 100%;
  overflow: hidden;
  /* 100% width slightly distorts it, but otherwise it might be narrower ... ?? */
  img {
    @include center-xy;
    height: 100%;
    width: auto;
    min-width: 100%;
  }
}
/* ALTERNATIVEE: If the img has only center-xy, it doesn't distort anything but just crops to exact middle of image ... ?*/

/* Mixin for attaching icons as right after-elements */
@mixin after-element-icon-with-hover($icon-path, $icon-hover-path, $right-positioning, $color) {
  @include hover-transition-content($color);

  &:after {
    content: "";
    background-image: url($icon-path);
    background-repeat: no-repeat;
    background-position: center;
    width: 20px;
    height: 20px;
    padding-left: 15px;
    right: $right-positioning;
    cursor: pointer;
    @include center-y;
    transition: background-image 0.25s;
  }

  &:hover:after {
    background-image: url($icon-hover-path);    
  }
}

@mixin after-element-icon($icon-path, $right-positioning) {
  &:after {
    content: "";
    background-image: url($icon-path);
    background-repeat: no-repeat;
    background-position: center;
    width: 20px;
    height: 20px;
    padding-left: 15px;
    right: $right-positioning;
    cursor: pointer;
    @include center-y;
  }
}

/* Mixins for hover effects on buttons etc. Will not show .25s transition on IE9, just jump directly to hover state*/
@mixin hover-transition-content($color) {
  transition: color 0.25s;

  &:hover {
    color: $color;
  }
}

@mixin hover-transition-background($color) {
  transition: background-color 0.25s;

  &:hover {
    background-color: $color;
  }
}

/* If both the color and background color should change upon hover, use this - otherwise the transitions will override each other */
@mixin hover-transition-content-and-background($content-color, $background-color) {
  transition: color 0.25s, background-color 0.25s;

  &:hover {
    color: $content-color;
    background-color: $background-color;
  }
}

/* Mixin for responsive type size */

@mixin font-size($fs-map) {
  @each $fs-breakpoint,
  $fs-font-size in $fs-map {
    @if $fs-breakpoint==null {
      font-size: $fs-font-size;
    }
    @else {
      @media screen and (min-width: $fs-breakpoint) {
        font-size: $fs-font-size;
      }
    }
  }
}


/* Maps for type changes*/

$h1-font-sizes: ( null: 1.25rem, $mobile-breakpoint: 2rem, $hero-breakpoint: 2.5rem);
$h1-subtitle-font-sizes: ( null: 1.25rem, $mobile-breakpoint: 2rem, $hero-breakpoint: 2.25rem);
$h2-font-sizes: ( null: 1.25rem, $mobile-breakpoint: 2rem);
$h3-font-sizes: ( null: 1.125rem, $mobile-breakpoint: 1.25rem);
$button-font-sizes: ( null: 0.75rem, $mobile-breakpoint: $base-text-size);
$hero-p-font-sizes: ( null: $base-text-size, $mobile-breakpoint: 1.25rem, $hero-breakpoint: 1.375rem);
$impact_number-font-sizes: ( null: 1.25rem, $mobile-breakpoint: 1.625rem);
$footer_menu_second-font-sizes: ( null: 0.875rem, 900px: 1rem);
$footer_menu_third-font-sizes: ( null: 0.750rem, 900px: 1rem);

/**
 * Useful mixin that onverts property in px to property in REM
 * pulled from https://github.com/bitmanic/rem by bitmanic
 * 
 * Example usage:
 * 
 *  .element {
 *    @include rem('padding',10px 0 2px 5px);
 *  }
 * 
 * Output:
 * 
 *  .element {
 *    padding: 10px 0 2px 5px;
 *    padding: 1rem 0 0.2rem 0.5rem;
 *  }
 */


/**
 * Baseline, measured in pixels
 * The value should be the same as the font-size value for the html element
 * If the html element's font-size is set to 62.5% (of the browser's default font-size of 16px),
 * then the variable below would be 10px.
 */

$baseline-px: 16px;
@mixin rem($property, $px-values) {
  // Convert the baseline into rems
  $baseline-rem: $baseline-px / 1rem * 1;
  // Print the first line in pixel values
  #{$property}: $px-values;
  // If there is only one (numeric) value, return the property/value line for it.
  @if type-of($px-values)=="number" {
    #{$property}: $px-values / $baseline-rem;
  }
  @else {
    // Create an empty list that we can dump values into
    $rem-values: ();
    @each $value in $px-values {
      // If the value is zero or not a number, return it
      @if $value==0 or type-of( $value) !="number" {
        $rem-values: append($rem-values, $value);
      }
      @else {
        $rem-values: append($rem-values, $value / $baseline-rem);
      }
    }
    // Return the property and its list of converted values
    #{$property}: $rem-values;
  }
}
