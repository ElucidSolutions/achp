<?php

use Drupal\file\Entity\File;
use Drupal\Core\Url;

/**
 * Implements hook_preprocess_block ().
 *
 * Ensures that every block element includes
 * its block ID in a data attribute.
 */
function achp_preprocess_block (&$variables) {
  $variables ['attributes']['data-plugin-id']            = $variables ['plugin_id'];
  $variables ['attributes']['data-derivative-plugin-id'] = $variables ['derivative_plugin_id'];
  $variables ['attributes']['data-base-plugin-id']       = $variables ['base_plugin_id'];
}

/**
 * Implements hook_preprocess_views_view ().
 *
 * Ensures that every view element includes its
 * view ID in a data attribute.
 */
function achp_preprocess_views_view (&$variables) {
  $variables ['attributes']['data-view-id'] = $variables ['id'];
}

// Implements hook_preprocess ().
function achp_preprocess_views_view__community_spotlight (&$variables) {
  foreach ($variables['rows'] as $id => &$row) {
    // Randomly select one row for display.
    $row ['#rows'] = array ($row ['#rows'][array_rand ($row ['#rows'])]);
  }
}

/**
 * Implements hook_preprocess_page ().
 *
 * Expose node/view IDs as template variables.
 */
function achp_preprocess_page (&$variables) {
  \Drupal::logger ('achp_theme')->notice ('[achp_preprocess_page] variables: <pre>' . print_r (array_keys ($variables), true) . '</pre>');

  $current_path = \Drupal::service ('path.current')->getPath ();
  $variables ['page_path'] = $current_path;
  $variables ['page_path_alias'] = \Drupal::service('path.alias_manager')->getAliasByPath($current_path);

  if (isset ($variables ['node'])) {
    $variables ['node_type'] = $variables ['node']->getType ();
    $variables ['node_id']   = $variables ['node']->id ();
  }
  $parameters = \Drupal::routeMatch ()->getParameters ();
  if ($parameters->has ('view_id')) {
    $variables ['view_id'] = $parameters->get ('view_id');
  }
}

/**
 * Implements hook_preprocess_node ().
 *
 * This function adds variables to the node
 * template that represent system settings such
 * as date_default_timezone.
 *
 * It also adds the URL of each file field item
 * to the file's item array.
 */
function achp_preprocess_node (&$variables) {
  \Drupal::logger ('achp_theme')->notice ('[achp_preprocess_node] variables: <pre>' . print_r (array_keys ($variables), true) . '</pre>');
  $variables ['achp_default_timezone'] = date_default_timezone_get ();

  $node = $variables ['node'];
  $field_definitions = \Drupal::service ('entity_field.manager')->getFieldDefinitions ('node', $node->getType ());
  foreach ($field_definitions as $field_name => $field_definition) {
    $field = $node->get ($field_name);
    if ($field instanceof \Drupal\file\Plugin\Field\FieldType\FileFieldItemList) {
      foreach ($field->referencedEntities () as $key => $file) {
        if ($file instanceof \Drupal\file\Entity\File) {
          $variables ['content'][$field_name][$key]['file_url'] = file_create_url ($file->getFileUri ());
        }
      }
    }
  }
}

/**
 * Implements hook_pre_render_alter ().
 *
 * This function adds a class to the last view
 * item displayed in a view row that uses the
 * Flickity format.
 *
 * The Flickity module defines
 * this hook function. See
 * modules/contrib/flickity/theme/flickity.theme.inc.
 *
 * Note: This hook is used by the image gallery feature.
 */
function achp_pre_render_alter (&$build) {
  $build ['#output'][count ($build ['#output']) - 1]['#attributes']['class'][] = 'last-item';
}

/**
 * Implements hook_form_FORM_ID_alter ().
 *
 * This function works around an apparent bug
 * in the Views module in which the date filter in
 * the News view will not reposition itself below
 * the topic filter when its weight is set using
 * the Views UI. This function manually assigns
 * a high weight to the date filter to position
 * the filter below the topic filter.
 */
function achp_form_views_exposed_form_alter (&$form, &$form_state, $form_id) {
  $form ['field_news_date_value']['#weight'] = 20;

  switch ($form ['#id']) {
    case 'views-exposed-form-digital-library-page-1':
    case 'views-exposed-form-digital-library-page-2':
    case 'views-exposed-form-digital-library-page-3':
    case 'views-exposed-form-digital-library-page-4':
    case 'views-exposed-form-digital-library-page-5':
    case 'views-exposed-form-digital-library-page-6':
      \Drupal::logger ('achp_theme')->notice ('[achp_form_views_exposed_form_alter] form: <pre>' . print_r (array_keys ($form ['keys']), true) . '</pre>');
      $form ['keys']['#attributes']['placeholder'] = 'Search';

      $form ['type']['#attributes']['class'][] = 'achp-select'; 
      $form ['type']['#attributes']['data-placeholder'] = 'All Types';

      $form ['field_tags_target_id']['#attributes']['class'][] = 'achp-select';
      $form ['field_tags_target_id']['#attributes']['data-placeholder'] = 'All Topics';

      $form ['actions']['submit']['#value'] = 'Search';

      $form ['#submit'][] = 'achp_digital_library_form_submit';
      break;
  }
}

/**
 * Process the select fields in the Digital
 * Library view form.
 *
 * Note: this function must be added to
 * the form's submit handlers list using
 * hook_form_alter.
 */
function achp_digital_library_form_submit (&$form, $form_state) {
  // select all of the content type options if none have been explicitly selected.
  if (empty ($form ['type']['#value'])) {
    foreach ($form ['type']['#options'] as $option) {
      array_push ($form ['type']['#value'], $option);
    }
  }

  // select all of the topic options if none have been explicitly selected.
  if (empty ($form ['field_tags_target_id']['#value'])) {
    foreach ($form ['field_tags_target_id']['#options'] as $option) {
      array_push ($form ['field_tags_target_id']['#value'], $option);
    }
  }
}

/**
 * Implements hook_preprocess_hook ()
 *
 * Exposes node fields in Entity Reference
 * field templates.
 */
function achp_preprocess_field (&$variables, $hook) {
  if ($variables ['field_type'] === 'entity_reference') {
    foreach ($variables ['element']['#items'] as $item_key => $item) {
      $nid = $item->getValue () ['target_id'];
      $node = entity_load ('node', $item->getValue () ['target_id']);
      if (!$node) { continue; }

      $title_value = $node->title->first ();
      if ($title_value) { 
        $variables ['items'][$item_key]['title'] = $title_value->getString (); 
      }

      $url = null;

      if ($node->field_attachment) {
        $value = $node->field_attachment->first ()->getValue ();
        $file = File::load ($value ['target_id']);
        $url = $file->url (); 
      } else {
        global $base_url;
        $url = $base_url . \Drupal::service ('path.alias_manager')->getAliasByPath ('/node/' . $nid);
      }

      $variables ['items'][$item_key]['url'] = $url;

      foreach ($node->body->getValue () as $value_key => $value) {
        $variables ['items'][$item_key]['body'] = $value ['summary'] ? 
          $value ['summary'] :
          $value ['value'];
      }
    }
  }
}
